// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v3.21.12
// source: utils/pb/newsletter/newsletter.proto

package __

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NewsLetterReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EmployerId int64   `protobuf:"varint,2,opt,name=employerId,proto3" json:"employerId,omitempty"`
	Content    string  `protobuf:"bytes,3,opt,name=Content,proto3" json:"Content,omitempty"`
	IsFree     bool    `protobuf:"varint,4,opt,name=isFree,proto3" json:"isFree,omitempty"`
	Amount     float32 `protobuf:"fixed32,5,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *NewsLetterReq) Reset() {
	*x = NewsLetterReq{}
	mi := &file_utils_pb_newsletter_newsletter_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewsLetterReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewsLetterReq) ProtoMessage() {}

func (x *NewsLetterReq) ProtoReflect() protoreflect.Message {
	mi := &file_utils_pb_newsletter_newsletter_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewsLetterReq.ProtoReflect.Descriptor instead.
func (*NewsLetterReq) Descriptor() ([]byte, []int) {
	return file_utils_pb_newsletter_newsletter_proto_rawDescGZIP(), []int{0}
}

func (x *NewsLetterReq) GetEmployerId() int64 {
	if x != nil {
		return x.EmployerId
	}
	return 0
}

func (x *NewsLetterReq) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *NewsLetterReq) GetIsFree() bool {
	if x != nil {
		return x.IsFree
	}
	return false
}

func (x *NewsLetterReq) GetAmount() float32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type NewsLetterRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	EmployerId int64   `protobuf:"varint,2,opt,name=employerId,proto3" json:"employerId,omitempty"`
	Content    string  `protobuf:"bytes,3,opt,name=Content,proto3" json:"Content,omitempty"`
	IsFree     bool    `protobuf:"varint,4,opt,name=isFree,proto3" json:"isFree,omitempty"`
	Amount     float32 `protobuf:"fixed32,5,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *NewsLetterRes) Reset() {
	*x = NewsLetterRes{}
	mi := &file_utils_pb_newsletter_newsletter_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewsLetterRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewsLetterRes) ProtoMessage() {}

func (x *NewsLetterRes) ProtoReflect() protoreflect.Message {
	mi := &file_utils_pb_newsletter_newsletter_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewsLetterRes.ProtoReflect.Descriptor instead.
func (*NewsLetterRes) Descriptor() ([]byte, []int) {
	return file_utils_pb_newsletter_newsletter_proto_rawDescGZIP(), []int{1}
}

func (x *NewsLetterRes) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *NewsLetterRes) GetEmployerId() int64 {
	if x != nil {
		return x.EmployerId
	}
	return 0
}

func (x *NewsLetterRes) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *NewsLetterRes) GetIsFree() bool {
	if x != nil {
		return x.IsFree
	}
	return false
}

func (x *NewsLetterRes) GetAmount() float32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type ListNewsLetterRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Newletters []*NewsLetterRes `protobuf:"bytes,1,rep,name=newletters,proto3" json:"newletters,omitempty"`
}

func (x *ListNewsLetterRes) Reset() {
	*x = ListNewsLetterRes{}
	mi := &file_utils_pb_newsletter_newsletter_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListNewsLetterRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNewsLetterRes) ProtoMessage() {}

func (x *ListNewsLetterRes) ProtoReflect() protoreflect.Message {
	mi := &file_utils_pb_newsletter_newsletter_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNewsLetterRes.ProtoReflect.Descriptor instead.
func (*ListNewsLetterRes) Descriptor() ([]byte, []int) {
	return file_utils_pb_newsletter_newsletter_proto_rawDescGZIP(), []int{2}
}

func (x *ListNewsLetterRes) GetNewletters() []*NewsLetterRes {
	if x != nil {
		return x.Newletters
	}
	return nil
}

type NLid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *NLid) Reset() {
	*x = NLid{}
	mi := &file_utils_pb_newsletter_newsletter_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NLid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NLid) ProtoMessage() {}

func (x *NLid) ProtoReflect() protoreflect.Message {
	mi := &file_utils_pb_newsletter_newsletter_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NLid.ProtoReflect.Descriptor instead.
func (*NLid) Descriptor() ([]byte, []int) {
	return file_utils_pb_newsletter_newsletter_proto_rawDescGZIP(), []int{3}
}

func (x *NLid) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type Subid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *Subid) Reset() {
	*x = Subid{}
	mi := &file_utils_pb_newsletter_newsletter_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Subid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Subid) ProtoMessage() {}

func (x *Subid) ProtoReflect() protoreflect.Message {
	mi := &file_utils_pb_newsletter_newsletter_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Subid.ProtoReflect.Descriptor instead.
func (*Subid) Descriptor() ([]byte, []int) {
	return file_utils_pb_newsletter_newsletter_proto_rawDescGZIP(), []int{4}
}

func (x *Subid) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type SubscriptionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Jobseekerid  int64 `protobuf:"varint,1,opt,name=jobseekerid,proto3" json:"jobseekerid,omitempty"`
	Newsletterid int64 `protobuf:"varint,2,opt,name=newsletterid,proto3" json:"newsletterid,omitempty"`
}

func (x *SubscriptionReq) Reset() {
	*x = SubscriptionReq{}
	mi := &file_utils_pb_newsletter_newsletter_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscriptionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriptionReq) ProtoMessage() {}

func (x *SubscriptionReq) ProtoReflect() protoreflect.Message {
	mi := &file_utils_pb_newsletter_newsletter_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriptionReq.ProtoReflect.Descriptor instead.
func (*SubscriptionReq) Descriptor() ([]byte, []int) {
	return file_utils_pb_newsletter_newsletter_proto_rawDescGZIP(), []int{5}
}

func (x *SubscriptionReq) GetJobseekerid() int64 {
	if x != nil {
		return x.Jobseekerid
	}
	return 0
}

func (x *SubscriptionReq) GetNewsletterid() int64 {
	if x != nil {
		return x.Newsletterid
	}
	return 0
}

type SubscriptionRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	JobseekerId int64                  `protobuf:"varint,2,opt,name=jobseeker_id,json=jobseekerId,proto3" json:"jobseeker_id,omitempty"`
	NewletterId int64                  `protobuf:"varint,3,opt,name=newletter_id,json=newletterId,proto3" json:"newletter_id,omitempty"`
	Startdate   *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=startdate,proto3" json:"startdate,omitempty"`
	Enddate     *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=enddate,proto3" json:"enddate,omitempty"`
	Status      string                 `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *SubscriptionRes) Reset() {
	*x = SubscriptionRes{}
	mi := &file_utils_pb_newsletter_newsletter_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscriptionRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriptionRes) ProtoMessage() {}

func (x *SubscriptionRes) ProtoReflect() protoreflect.Message {
	mi := &file_utils_pb_newsletter_newsletter_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriptionRes.ProtoReflect.Descriptor instead.
func (*SubscriptionRes) Descriptor() ([]byte, []int) {
	return file_utils_pb_newsletter_newsletter_proto_rawDescGZIP(), []int{6}
}

func (x *SubscriptionRes) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SubscriptionRes) GetJobseekerId() int64 {
	if x != nil {
		return x.JobseekerId
	}
	return 0
}

func (x *SubscriptionRes) GetNewletterId() int64 {
	if x != nil {
		return x.NewletterId
	}
	return 0
}

func (x *SubscriptionRes) GetStartdate() *timestamppb.Timestamp {
	if x != nil {
		return x.Startdate
	}
	return nil
}

func (x *SubscriptionRes) GetEnddate() *timestamppb.Timestamp {
	if x != nil {
		return x.Enddate
	}
	return nil
}

func (x *SubscriptionRes) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type PaymentRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	SubscriptionId int64                  `protobuf:"varint,2,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
	Amount         float32                `protobuf:"fixed32,3,opt,name=amount,proto3" json:"amount,omitempty"`
	Status         string                 `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	Date           *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=date,proto3" json:"date,omitempty"`
}

func (x *PaymentRes) Reset() {
	*x = PaymentRes{}
	mi := &file_utils_pb_newsletter_newsletter_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PaymentRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentRes) ProtoMessage() {}

func (x *PaymentRes) ProtoReflect() protoreflect.Message {
	mi := &file_utils_pb_newsletter_newsletter_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentRes.ProtoReflect.Descriptor instead.
func (*PaymentRes) Descriptor() ([]byte, []int) {
	return file_utils_pb_newsletter_newsletter_proto_rawDescGZIP(), []int{7}
}

func (x *PaymentRes) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PaymentRes) GetSubscriptionId() int64 {
	if x != nil {
		return x.SubscriptionId
	}
	return 0
}

func (x *PaymentRes) GetAmount() float32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *PaymentRes) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *PaymentRes) GetDate() *timestamppb.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

type RazorpayRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	PaymentId int64  `protobuf:"varint,2,opt,name=payment_id,json=paymentId,proto3" json:"payment_id,omitempty"`
	PayId     string `protobuf:"bytes,3,opt,name=pay_id,json=payId,proto3" json:"pay_id,omitempty"`
	OrderId   string `protobuf:"bytes,4,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	Signature string `protobuf:"bytes,5,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *RazorpayRes) Reset() {
	*x = RazorpayRes{}
	mi := &file_utils_pb_newsletter_newsletter_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RazorpayRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RazorpayRes) ProtoMessage() {}

func (x *RazorpayRes) ProtoReflect() protoreflect.Message {
	mi := &file_utils_pb_newsletter_newsletter_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RazorpayRes.ProtoReflect.Descriptor instead.
func (*RazorpayRes) Descriptor() ([]byte, []int) {
	return file_utils_pb_newsletter_newsletter_proto_rawDescGZIP(), []int{8}
}

func (x *RazorpayRes) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RazorpayRes) GetPaymentId() int64 {
	if x != nil {
		return x.PaymentId
	}
	return 0
}

func (x *RazorpayRes) GetPayId() string {
	if x != nil {
		return x.PayId
	}
	return ""
}

func (x *RazorpayRes) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *RazorpayRes) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

type SPR struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subscirption *SubscriptionRes `protobuf:"bytes,1,opt,name=subscirption,proto3" json:"subscirption,omitempty"`
	Payment      *PaymentRes      `protobuf:"bytes,2,opt,name=payment,proto3" json:"payment,omitempty"`
	Razorpay     *RazorpayRes     `protobuf:"bytes,3,opt,name=razorpay,proto3" json:"razorpay,omitempty"`
}

func (x *SPR) Reset() {
	*x = SPR{}
	mi := &file_utils_pb_newsletter_newsletter_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SPR) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SPR) ProtoMessage() {}

func (x *SPR) ProtoReflect() protoreflect.Message {
	mi := &file_utils_pb_newsletter_newsletter_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SPR.ProtoReflect.Descriptor instead.
func (*SPR) Descriptor() ([]byte, []int) {
	return file_utils_pb_newsletter_newsletter_proto_rawDescGZIP(), []int{9}
}

func (x *SPR) GetSubscirption() *SubscriptionRes {
	if x != nil {
		return x.Subscirption
	}
	return nil
}

func (x *SPR) GetPayment() *PaymentRes {
	if x != nil {
		return x.Payment
	}
	return nil
}

func (x *SPR) GetRazorpay() *RazorpayRes {
	if x != nil {
		return x.Razorpay
	}
	return nil
}

type ArrSPR struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Spr []*SPR `protobuf:"bytes,1,rep,name=spr,proto3" json:"spr,omitempty"`
}

func (x *ArrSPR) Reset() {
	*x = ArrSPR{}
	mi := &file_utils_pb_newsletter_newsletter_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArrSPR) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArrSPR) ProtoMessage() {}

func (x *ArrSPR) ProtoReflect() protoreflect.Message {
	mi := &file_utils_pb_newsletter_newsletter_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArrSPR.ProtoReflect.Descriptor instead.
func (*ArrSPR) Descriptor() ([]byte, []int) {
	return file_utils_pb_newsletter_newsletter_proto_rawDescGZIP(), []int{10}
}

func (x *ArrSPR) GetSpr() []*SPR {
	if x != nil {
		return x.Spr
	}
	return nil
}

type Razorpay struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PayId     string `protobuf:"bytes,3,opt,name=pay_id,json=payId,proto3" json:"pay_id,omitempty"`
	OrderId   string `protobuf:"bytes,4,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	Signature string `protobuf:"bytes,5,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *Razorpay) Reset() {
	*x = Razorpay{}
	mi := &file_utils_pb_newsletter_newsletter_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Razorpay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Razorpay) ProtoMessage() {}

func (x *Razorpay) ProtoReflect() protoreflect.Message {
	mi := &file_utils_pb_newsletter_newsletter_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Razorpay.ProtoReflect.Descriptor instead.
func (*Razorpay) Descriptor() ([]byte, []int) {
	return file_utils_pb_newsletter_newsletter_proto_rawDescGZIP(), []int{11}
}

func (x *Razorpay) GetPayId() string {
	if x != nil {
		return x.PayId
	}
	return ""
}

func (x *Razorpay) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *Razorpay) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

type UpdateSubscriptionAndPaymentReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subid    *Subid    `protobuf:"bytes,1,opt,name=subid,proto3" json:"subid,omitempty"`
	Razorpay *Razorpay `protobuf:"bytes,2,opt,name=razorpay,proto3" json:"razorpay,omitempty"`
}

func (x *UpdateSubscriptionAndPaymentReq) Reset() {
	*x = UpdateSubscriptionAndPaymentReq{}
	mi := &file_utils_pb_newsletter_newsletter_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateSubscriptionAndPaymentReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSubscriptionAndPaymentReq) ProtoMessage() {}

func (x *UpdateSubscriptionAndPaymentReq) ProtoReflect() protoreflect.Message {
	mi := &file_utils_pb_newsletter_newsletter_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSubscriptionAndPaymentReq.ProtoReflect.Descriptor instead.
func (*UpdateSubscriptionAndPaymentReq) Descriptor() ([]byte, []int) {
	return file_utils_pb_newsletter_newsletter_proto_rawDescGZIP(), []int{12}
}

func (x *UpdateSubscriptionAndPaymentReq) GetSubid() *Subid {
	if x != nil {
		return x.Subid
	}
	return nil
}

func (x *UpdateSubscriptionAndPaymentReq) GetRazorpay() *Razorpay {
	if x != nil {
		return x.Razorpay
	}
	return nil
}

type GetSubscribersReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Empid int64 `protobuf:"varint,1,opt,name=empid,proto3" json:"empid,omitempty"`
	Nlid  int64 `protobuf:"varint,2,opt,name=nlid,proto3" json:"nlid,omitempty"`
}

func (x *GetSubscribersReq) Reset() {
	*x = GetSubscribersReq{}
	mi := &file_utils_pb_newsletter_newsletter_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSubscribersReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubscribersReq) ProtoMessage() {}

func (x *GetSubscribersReq) ProtoReflect() protoreflect.Message {
	mi := &file_utils_pb_newsletter_newsletter_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubscribersReq.ProtoReflect.Descriptor instead.
func (*GetSubscribersReq) Descriptor() ([]byte, []int) {
	return file_utils_pb_newsletter_newsletter_proto_rawDescGZIP(), []int{13}
}

func (x *GetSubscribersReq) GetEmpid() int64 {
	if x != nil {
		return x.Empid
	}
	return 0
}

func (x *GetSubscribersReq) GetNlid() int64 {
	if x != nil {
		return x.Nlid
	}
	return 0
}

type GetSubscribersRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subs     []*SubscriptionRes `protobuf:"bytes,1,rep,name=subs,proto3" json:"subs,omitempty"`
	Active   int64              `protobuf:"varint,2,opt,name=active,proto3" json:"active,omitempty"`
	Inactive int64              `protobuf:"varint,3,opt,name=inactive,proto3" json:"inactive,omitempty"`
	Canceled int64              `protobuf:"varint,4,opt,name=canceled,proto3" json:"canceled,omitempty"`
	Expired  int64              `protobuf:"varint,5,opt,name=expired,proto3" json:"expired,omitempty"`
}

func (x *GetSubscribersRes) Reset() {
	*x = GetSubscribersRes{}
	mi := &file_utils_pb_newsletter_newsletter_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSubscribersRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubscribersRes) ProtoMessage() {}

func (x *GetSubscribersRes) ProtoReflect() protoreflect.Message {
	mi := &file_utils_pb_newsletter_newsletter_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubscribersRes.ProtoReflect.Descriptor instead.
func (*GetSubscribersRes) Descriptor() ([]byte, []int) {
	return file_utils_pb_newsletter_newsletter_proto_rawDescGZIP(), []int{14}
}

func (x *GetSubscribersRes) GetSubs() []*SubscriptionRes {
	if x != nil {
		return x.Subs
	}
	return nil
}

func (x *GetSubscribersRes) GetActive() int64 {
	if x != nil {
		return x.Active
	}
	return 0
}

func (x *GetSubscribersRes) GetInactive() int64 {
	if x != nil {
		return x.Inactive
	}
	return 0
}

func (x *GetSubscribersRes) GetCanceled() int64 {
	if x != nil {
		return x.Canceled
	}
	return 0
}

func (x *GetSubscribersRes) GetExpired() int64 {
	if x != nil {
		return x.Expired
	}
	return 0
}

var File_utils_pb_newsletter_newsletter_proto protoreflect.FileDescriptor

var file_utils_pb_newsletter_newsletter_proto_rawDesc = []byte{
	0x0a, 0x24, 0x75, 0x74, 0x69, 0x6c, 0x73, 0x2f, 0x70, 0x62, 0x2f, 0x6e, 0x65, 0x77, 0x73, 0x6c,
	0x65, 0x74, 0x74, 0x65, 0x72, 0x2f, 0x6e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x6e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74,
	0x65, 0x72, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x79, 0x0a, 0x0d, 0x4e, 0x65, 0x77, 0x73, 0x4c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x69,
	0x73, 0x46, 0x72, 0x65, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x46,
	0x72, 0x65, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x89, 0x01, 0x0a, 0x0d,
	0x4e, 0x65, 0x77, 0x73, 0x4c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x46, 0x72, 0x65,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x46, 0x72, 0x65, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x4e, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x4e,
	0x65, 0x77, 0x73, 0x4c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x0a,
	0x6e, 0x65, 0x77, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x2e, 0x4e, 0x65,
	0x77, 0x73, 0x4c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x52, 0x0a, 0x6e, 0x65, 0x77,
	0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x73, 0x22, 0x16, 0x0a, 0x04, 0x4e, 0x4c, 0x69, 0x64, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x17, 0x0a, 0x05, 0x53, 0x75, 0x62, 0x69, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x57, 0x0a, 0x0f, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x6a,
	0x6f, 0x62, 0x73, 0x65, 0x65, 0x6b, 0x65, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x6a, 0x6f, 0x62, 0x73, 0x65, 0x65, 0x6b, 0x65, 0x72, 0x69, 0x64, 0x12, 0x22, 0x0a,
	0x0c, 0x6e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x6e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x69,
	0x64, 0x22, 0xef, 0x01, 0x0a, 0x0f, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6a, 0x6f, 0x62, 0x73, 0x65, 0x65, 0x6b,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6a, 0x6f, 0x62,
	0x73, 0x65, 0x65, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x65, 0x77, 0x6c,
	0x65, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x6e, 0x65, 0x77, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x64, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x64, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0xa5, 0x01, 0x0a, 0x0a, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2e, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x22, 0x8c, 0x01, 0x0a, 0x0b,
	0x52, 0x61, 0x7a, 0x6f, 0x72, 0x70, 0x61, 0x79, 0x52, 0x65, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x70, 0x61,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x79, 0x49,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xad, 0x01, 0x0a, 0x03, 0x53,
	0x50, 0x52, 0x12, 0x3f, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x69, 0x72, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x6c,
	0x65, 0x74, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x69, 0x72, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65,
	0x72, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x52, 0x07, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x08, 0x72, 0x61, 0x7a, 0x6f, 0x72, 0x70, 0x61,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x6c, 0x65,
	0x74, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x61, 0x7a, 0x6f, 0x72, 0x70, 0x61, 0x79, 0x52, 0x65, 0x73,
	0x52, 0x08, 0x72, 0x61, 0x7a, 0x6f, 0x72, 0x70, 0x61, 0x79, 0x22, 0x2b, 0x0a, 0x06, 0x41, 0x72,
	0x72, 0x53, 0x50, 0x52, 0x12, 0x21, 0x0a, 0x03, 0x73, 0x70, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x2e, 0x53,
	0x50, 0x52, 0x52, 0x03, 0x73, 0x70, 0x72, 0x22, 0x5a, 0x0a, 0x08, 0x52, 0x61, 0x7a, 0x6f, 0x72,
	0x70, 0x61, 0x79, 0x12, 0x15, 0x0a, 0x06, 0x70, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x79, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x22, 0x7c, 0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x64, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x27, 0x0a, 0x05, 0x73, 0x75, 0x62, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74,
	0x65, 0x72, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x64, 0x52, 0x05, 0x73, 0x75, 0x62, 0x69, 0x64, 0x12,
	0x30, 0x0a, 0x08, 0x72, 0x61, 0x7a, 0x6f, 0x72, 0x70, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x2e, 0x52,
	0x61, 0x7a, 0x6f, 0x72, 0x70, 0x61, 0x79, 0x52, 0x08, 0x72, 0x61, 0x7a, 0x6f, 0x72, 0x70, 0x61,
	0x79, 0x22, 0x3d, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x70, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x65, 0x6d, 0x70, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x6c, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6e, 0x6c, 0x69, 0x64,
	0x22, 0xae, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x04, 0x73, 0x75, 0x62, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65,
	0x72, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x52, 0x04, 0x73, 0x75, 0x62, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x64, 0x32, 0xb3, 0x05, 0x0a, 0x0a, 0x4e, 0x65, 0x77, 0x73, 0x4c, 0x65, 0x74, 0x74, 0x65, 0x72,
	0x12, 0x41, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72,
	0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x1a, 0x0f, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x50,
	0x52, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x12, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x11, 0x2e, 0x6e, 0x65, 0x77, 0x73,
	0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x64, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x12, 0x19, 0x2e, 0x6e, 0x65, 0x77,
	0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x2e, 0x4e, 0x65, 0x77, 0x73, 0x4c, 0x65, 0x74, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74,
	0x65, 0x72, 0x2e, 0x4e, 0x65, 0x77, 0x73, 0x4c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x22, 0x00, 0x12, 0x3e, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x73, 0x4c, 0x65, 0x74,
	0x74, 0x65, 0x72, 0x12, 0x10, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72,
	0x2e, 0x4e, 0x4c, 0x69, 0x64, 0x1a, 0x19, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74,
	0x65, 0x72, 0x2e, 0x4e, 0x65, 0x77, 0x73, 0x4c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x22, 0x00, 0x12, 0x4a, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x65, 0x77, 0x73, 0x4c, 0x65,
	0x74, 0x74, 0x65, 0x72, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1d, 0x2e,
	0x6e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e,
	0x65, 0x77, 0x73, 0x4c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x48,
	0x0a, 0x20, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x6e, 0x64, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x12, 0x11, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x2e,
	0x53, 0x75, 0x62, 0x69, 0x64, 0x1a, 0x0f, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74,
	0x65, 0x72, 0x2e, 0x53, 0x50, 0x52, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e,
	0x64, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x6c,
	0x65, 0x74, 0x74, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x64, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12,
	0x50, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72,
	0x73, 0x12, 0x1d, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x2e, 0x47,
	0x65, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71,
	0x1a, 0x1d, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65,
	0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x22,
	0x00, 0x12, 0x44, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65,
	0x72, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x1a, 0x12, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x2e, 0x41,
	0x72, 0x72, 0x53, 0x50, 0x52, 0x22, 0x00, 0x42, 0x04, 0x5a, 0x02, 0x2e, 0x2f, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_utils_pb_newsletter_newsletter_proto_rawDescOnce sync.Once
	file_utils_pb_newsletter_newsletter_proto_rawDescData = file_utils_pb_newsletter_newsletter_proto_rawDesc
)

func file_utils_pb_newsletter_newsletter_proto_rawDescGZIP() []byte {
	file_utils_pb_newsletter_newsletter_proto_rawDescOnce.Do(func() {
		file_utils_pb_newsletter_newsletter_proto_rawDescData = protoimpl.X.CompressGZIP(file_utils_pb_newsletter_newsletter_proto_rawDescData)
	})
	return file_utils_pb_newsletter_newsletter_proto_rawDescData
}

var file_utils_pb_newsletter_newsletter_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_utils_pb_newsletter_newsletter_proto_goTypes = []any{
	(*NewsLetterReq)(nil),                   // 0: newsletter.NewsLetterReq
	(*NewsLetterRes)(nil),                   // 1: newsletter.NewsLetterRes
	(*ListNewsLetterRes)(nil),               // 2: newsletter.ListNewsLetterRes
	(*NLid)(nil),                            // 3: newsletter.NLid
	(*Subid)(nil),                           // 4: newsletter.Subid
	(*SubscriptionReq)(nil),                 // 5: newsletter.SubscriptionReq
	(*SubscriptionRes)(nil),                 // 6: newsletter.SubscriptionRes
	(*PaymentRes)(nil),                      // 7: newsletter.PaymentRes
	(*RazorpayRes)(nil),                     // 8: newsletter.RazorpayRes
	(*SPR)(nil),                             // 9: newsletter.SPR
	(*ArrSPR)(nil),                          // 10: newsletter.ArrSPR
	(*Razorpay)(nil),                        // 11: newsletter.Razorpay
	(*UpdateSubscriptionAndPaymentReq)(nil), // 12: newsletter.UpdateSubscriptionAndPaymentReq
	(*GetSubscribersReq)(nil),               // 13: newsletter.GetSubscribersReq
	(*GetSubscribersRes)(nil),               // 14: newsletter.GetSubscribersRes
	(*timestamppb.Timestamp)(nil),           // 15: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),                   // 16: google.protobuf.Empty
}
var file_utils_pb_newsletter_newsletter_proto_depIdxs = []int32{
	1,  // 0: newsletter.ListNewsLetterRes.newletters:type_name -> newsletter.NewsLetterRes
	15, // 1: newsletter.SubscriptionRes.startdate:type_name -> google.protobuf.Timestamp
	15, // 2: newsletter.SubscriptionRes.enddate:type_name -> google.protobuf.Timestamp
	15, // 3: newsletter.PaymentRes.date:type_name -> google.protobuf.Timestamp
	6,  // 4: newsletter.SPR.subscirption:type_name -> newsletter.SubscriptionRes
	7,  // 5: newsletter.SPR.payment:type_name -> newsletter.PaymentRes
	8,  // 6: newsletter.SPR.razorpay:type_name -> newsletter.RazorpayRes
	9,  // 7: newsletter.ArrSPR.spr:type_name -> newsletter.SPR
	4,  // 8: newsletter.UpdateSubscriptionAndPaymentReq.subid:type_name -> newsletter.Subid
	11, // 9: newsletter.UpdateSubscriptionAndPaymentReq.razorpay:type_name -> newsletter.Razorpay
	6,  // 10: newsletter.GetSubscribersRes.subs:type_name -> newsletter.SubscriptionRes
	5,  // 11: newsletter.NewsLetter.AddSubscription:input_type -> newsletter.SubscriptionReq
	4,  // 12: newsletter.NewsLetter.CancelSubscription:input_type -> newsletter.Subid
	0,  // 13: newsletter.NewsLetter.CreateNewsletter:input_type -> newsletter.NewsLetterReq
	3,  // 14: newsletter.NewsLetter.GetNewsLetter:input_type -> newsletter.NLid
	16, // 15: newsletter.NewsLetter.ListNewsLetters:input_type -> google.protobuf.Empty
	4,  // 16: newsletter.NewsLetter.GetSubscriptionAndPaymentDetails:input_type -> newsletter.Subid
	12, // 17: newsletter.NewsLetter.UpdateSubscriptionAndPayment:input_type -> newsletter.UpdateSubscriptionAndPaymentReq
	13, // 18: newsletter.NewsLetter.GetSubscribers:input_type -> newsletter.GetSubscribersReq
	5,  // 19: newsletter.NewsLetter.GetSubscription:input_type -> newsletter.SubscriptionReq
	9,  // 20: newsletter.NewsLetter.AddSubscription:output_type -> newsletter.SPR
	16, // 21: newsletter.NewsLetter.CancelSubscription:output_type -> google.protobuf.Empty
	1,  // 22: newsletter.NewsLetter.CreateNewsletter:output_type -> newsletter.NewsLetterRes
	1,  // 23: newsletter.NewsLetter.GetNewsLetter:output_type -> newsletter.NewsLetterRes
	2,  // 24: newsletter.NewsLetter.ListNewsLetters:output_type -> newsletter.ListNewsLetterRes
	9,  // 25: newsletter.NewsLetter.GetSubscriptionAndPaymentDetails:output_type -> newsletter.SPR
	16, // 26: newsletter.NewsLetter.UpdateSubscriptionAndPayment:output_type -> google.protobuf.Empty
	14, // 27: newsletter.NewsLetter.GetSubscribers:output_type -> newsletter.GetSubscribersRes
	10, // 28: newsletter.NewsLetter.GetSubscription:output_type -> newsletter.ArrSPR
	20, // [20:29] is the sub-list for method output_type
	11, // [11:20] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_utils_pb_newsletter_newsletter_proto_init() }
func file_utils_pb_newsletter_newsletter_proto_init() {
	if File_utils_pb_newsletter_newsletter_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_utils_pb_newsletter_newsletter_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_utils_pb_newsletter_newsletter_proto_goTypes,
		DependencyIndexes: file_utils_pb_newsletter_newsletter_proto_depIdxs,
		MessageInfos:      file_utils_pb_newsletter_newsletter_proto_msgTypes,
	}.Build()
	File_utils_pb_newsletter_newsletter_proto = out.File
	file_utils_pb_newsletter_newsletter_proto_rawDesc = nil
	file_utils_pb_newsletter_newsletter_proto_goTypes = nil
	file_utils_pb_newsletter_newsletter_proto_depIdxs = nil
}
