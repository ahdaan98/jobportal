// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: utils/pb/job/job.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Job_CreateJob_FullMethodName             = "/job.Job/CreateJob"
	Job_GetJob_FullMethodName                = "/job.Job/GetJob"
	Job_ListJobs_FullMethodName              = "/job.Job/ListJobs"
	Job_UpdateJob_FullMethodName             = "/job.Job/UpdateJob"
	Job_ApplyJob_FullMethodName              = "/job.Job/ApplyJob"
	Job_ListApplyJobByID_FullMethodName      = "/job.Job/ListApplyJobByID"
	Job_UpdateApplicants_FullMethodName      = "/job.Job/UpdateApplicants"
	Job_Getapplicantsbystatus_FullMethodName = "/job.Job/Getapplicantsbystatus"
)

// JobClient is the client API for Job service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JobClient interface {
	CreateJob(ctx context.Context, in *JobReq, opts ...grpc.CallOption) (*JobRes, error)
	GetJob(ctx context.Context, in *GetJobReq, opts ...grpc.CallOption) (*JobRes, error)
	ListJobs(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListJobRes, error)
	UpdateJob(ctx context.Context, in *UpdateJobReq, opts ...grpc.CallOption) (*JobRes, error)
	ApplyJob(ctx context.Context, in *ApplyJobReq, opts ...grpc.CallOption) (*ApplyJobRes, error)
	ListApplyJobByID(ctx context.Context, in *GetJobReq, opts ...grpc.CallOption) (*ListApplyJob, error)
	UpdateApplicants(ctx context.Context, in *UpdateAppReq, opts ...grpc.CallOption) (*ApplyJobRes, error)
	Getapplicantsbystatus(ctx context.Context, in *GetApplicantReq, opts ...grpc.CallOption) (*ListApplyJob, error)
}

type jobClient struct {
	cc grpc.ClientConnInterface
}

func NewJobClient(cc grpc.ClientConnInterface) JobClient {
	return &jobClient{cc}
}

func (c *jobClient) CreateJob(ctx context.Context, in *JobReq, opts ...grpc.CallOption) (*JobRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JobRes)
	err := c.cc.Invoke(ctx, Job_CreateJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobClient) GetJob(ctx context.Context, in *GetJobReq, opts ...grpc.CallOption) (*JobRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JobRes)
	err := c.cc.Invoke(ctx, Job_GetJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobClient) ListJobs(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListJobRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListJobRes)
	err := c.cc.Invoke(ctx, Job_ListJobs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobClient) UpdateJob(ctx context.Context, in *UpdateJobReq, opts ...grpc.CallOption) (*JobRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JobRes)
	err := c.cc.Invoke(ctx, Job_UpdateJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobClient) ApplyJob(ctx context.Context, in *ApplyJobReq, opts ...grpc.CallOption) (*ApplyJobRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApplyJobRes)
	err := c.cc.Invoke(ctx, Job_ApplyJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobClient) ListApplyJobByID(ctx context.Context, in *GetJobReq, opts ...grpc.CallOption) (*ListApplyJob, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListApplyJob)
	err := c.cc.Invoke(ctx, Job_ListApplyJobByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobClient) UpdateApplicants(ctx context.Context, in *UpdateAppReq, opts ...grpc.CallOption) (*ApplyJobRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApplyJobRes)
	err := c.cc.Invoke(ctx, Job_UpdateApplicants_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobClient) Getapplicantsbystatus(ctx context.Context, in *GetApplicantReq, opts ...grpc.CallOption) (*ListApplyJob, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListApplyJob)
	err := c.cc.Invoke(ctx, Job_Getapplicantsbystatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JobServer is the server API for Job service.
// All implementations must embed UnimplementedJobServer
// for forward compatibility.
type JobServer interface {
	CreateJob(context.Context, *JobReq) (*JobRes, error)
	GetJob(context.Context, *GetJobReq) (*JobRes, error)
	ListJobs(context.Context, *emptypb.Empty) (*ListJobRes, error)
	UpdateJob(context.Context, *UpdateJobReq) (*JobRes, error)
	ApplyJob(context.Context, *ApplyJobReq) (*ApplyJobRes, error)
	ListApplyJobByID(context.Context, *GetJobReq) (*ListApplyJob, error)
	UpdateApplicants(context.Context, *UpdateAppReq) (*ApplyJobRes, error)
	Getapplicantsbystatus(context.Context, *GetApplicantReq) (*ListApplyJob, error)
	mustEmbedUnimplementedJobServer()
}

// UnimplementedJobServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedJobServer struct{}

func (UnimplementedJobServer) CreateJob(context.Context, *JobReq) (*JobRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateJob not implemented")
}
func (UnimplementedJobServer) GetJob(context.Context, *GetJobReq) (*JobRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJob not implemented")
}
func (UnimplementedJobServer) ListJobs(context.Context, *emptypb.Empty) (*ListJobRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListJobs not implemented")
}
func (UnimplementedJobServer) UpdateJob(context.Context, *UpdateJobReq) (*JobRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateJob not implemented")
}
func (UnimplementedJobServer) ApplyJob(context.Context, *ApplyJobReq) (*ApplyJobRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyJob not implemented")
}
func (UnimplementedJobServer) ListApplyJobByID(context.Context, *GetJobReq) (*ListApplyJob, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListApplyJobByID not implemented")
}
func (UnimplementedJobServer) UpdateApplicants(context.Context, *UpdateAppReq) (*ApplyJobRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateApplicants not implemented")
}
func (UnimplementedJobServer) Getapplicantsbystatus(context.Context, *GetApplicantReq) (*ListApplyJob, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Getapplicantsbystatus not implemented")
}
func (UnimplementedJobServer) mustEmbedUnimplementedJobServer() {}
func (UnimplementedJobServer) testEmbeddedByValue()             {}

// UnsafeJobServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JobServer will
// result in compilation errors.
type UnsafeJobServer interface {
	mustEmbedUnimplementedJobServer()
}

func RegisterJobServer(s grpc.ServiceRegistrar, srv JobServer) {
	// If the following call pancis, it indicates UnimplementedJobServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Job_ServiceDesc, srv)
}

func _Job_CreateJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServer).CreateJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Job_CreateJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServer).CreateJob(ctx, req.(*JobReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Job_GetJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJobReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServer).GetJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Job_GetJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServer).GetJob(ctx, req.(*GetJobReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Job_ListJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServer).ListJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Job_ListJobs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServer).ListJobs(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Job_UpdateJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateJobReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServer).UpdateJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Job_UpdateJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServer).UpdateJob(ctx, req.(*UpdateJobReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Job_ApplyJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyJobReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServer).ApplyJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Job_ApplyJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServer).ApplyJob(ctx, req.(*ApplyJobReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Job_ListApplyJobByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJobReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServer).ListApplyJobByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Job_ListApplyJobByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServer).ListApplyJobByID(ctx, req.(*GetJobReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Job_UpdateApplicants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAppReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServer).UpdateApplicants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Job_UpdateApplicants_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServer).UpdateApplicants(ctx, req.(*UpdateAppReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Job_Getapplicantsbystatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApplicantReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServer).Getapplicantsbystatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Job_Getapplicantsbystatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServer).Getapplicantsbystatus(ctx, req.(*GetApplicantReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Job_ServiceDesc is the grpc.ServiceDesc for Job service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Job_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "job.Job",
	HandlerType: (*JobServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateJob",
			Handler:    _Job_CreateJob_Handler,
		},
		{
			MethodName: "GetJob",
			Handler:    _Job_GetJob_Handler,
		},
		{
			MethodName: "ListJobs",
			Handler:    _Job_ListJobs_Handler,
		},
		{
			MethodName: "UpdateJob",
			Handler:    _Job_UpdateJob_Handler,
		},
		{
			MethodName: "ApplyJob",
			Handler:    _Job_ApplyJob_Handler,
		},
		{
			MethodName: "ListApplyJobByID",
			Handler:    _Job_ListApplyJobByID_Handler,
		},
		{
			MethodName: "UpdateApplicants",
			Handler:    _Job_UpdateApplicants_Handler,
		},
		{
			MethodName: "Getapplicantsbystatus",
			Handler:    _Job_Getapplicantsbystatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "utils/pb/job/job.proto",
}
